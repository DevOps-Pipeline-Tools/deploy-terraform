name: Terraform AWS Workflow
on:
  pull_request:
    branches: [ main ]
    paths: 
      - 'joo/**'
      - '.github/workflows/joo-workflow.yml'
  push:
    branches: [ main ]
    paths: 
      - 'joo/**'
      - '.github/workflows/joo-workflow.yml'

jobs:
  tf_code_check: 
    permissions: 
      id-token: write
      contents: read
      pull-requests: write
    env:
      tg_version: 'v0.52.1'
    environment: joo
    defaults:
      run:
        working-directory: ./joo
    runs-on: ubuntu-latest
    steps:
    - name: Checkout tf code in runner environment 
      uses: actions/checkout@v4

    - name: Configure AWS Credentials Action For GitHub Actions
      uses: aws-actions/configure-aws-credentials@v4
      with: 
        role-to-assume: ${{ secrets.AWS_ROLE }}
        aws-region: ap-northeast-2

    - name: Setup Terragrunt
      run: |
        mkdir bin
        wget -O bin/terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/$tg_version/terragrunt_linux_amd64
        chmod +x bin/terragrunt
        echo "$GITHUB_WORKSPACE/joo/bin" >> $GITHUB_PATH

    - name: Terragrunt hclfmt
      id: hclfmt
      run: terragrunt hclfmt --terragrunt-check --terragrunt-diff
      continue-on-error: true

    - name: Terraform fmt
      id: fmt
      run: |
        terraform fmt -check

    - name: Terragrunt validate
      id: validate
      run: terragrunt run-all validate --terragrunt-exclude-dir "**/.terragrunt-cache/**/*"

    - name: Terragrunt plan
      id: plan
      run: terragrunt run-all plan --terragrunt-exclude-dir "**/.terragrunt-cache/**/*"

    - name: Terraform Plan Output
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terragrunt\n${{ steps.plan.outputs.stdout }}" 
      with: 
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: | #javascript code
         const output = `## 테라폼 구축 계획
          #### terragrunt hclfmt ⚙️\`${{ steps.hclfmt.outcome }}\`
          #### terraform fmt 🖌\`${{ steps.fmt.outcome }}\`
          #### terragrunt validate 🤖\`${{ steps.validate.outcome }}\`
          <details><summary>문법 검사 결과</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### terragrunt plan 📖\`${{ steps.plan.outcome }}\`

          <details><summary>테라폼 구축 계획</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          **위의 내용으로 테라폼 배포를 요청합니다!**

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terragrunt apply
      id: apply
      if: github.event_name == 'push'
      run: terragrunt run-all apply --terragrunt-exclude-dir "**/.terragrunt-cache/**/*" --terragrunt-non-interactive

    - name: Terragrunt destroy
      id: destroy
      if: github.event_name == 'push'
      run: terragrunt run-all destroy --terragrunt-exclude-dir "**/.terragrunt-cache/**/*" --terragrunt-non-interactive