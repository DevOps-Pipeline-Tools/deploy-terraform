# Terrafrom-actions.yml

name: Terraform AWS Workflow

on:
  push:
    branches:
			- main
  pull_request:

jobs:
	# 코드 스캔
	TF_Code_Scan:
	  name: Code Scan
	  runs-on: ubuntu-latest

	  steps:
			- name: Checkout code
				uses: actions/checkout@v4

			# IaC(Infrastructure as Code) 스캐너
			- name: Run Terrascan
			  id: terrascan
			  uses: tenable/terrascan-action@main
				with:
					# IaC 유형(helm, k8s, kustomize, terraform)
				  iac_type: "terraform"
					iac_version: "v14"
					# 정책 유형(all, aws, azure, gcp, github, k8s). 기본값 all
				  policy_type: "aws"
					# 코드에 문제가 있으면 경고만 하고 에러는 발생하지 않는다.
				  only_warn: true
          # terrascan.sarif라는 sarif 파일이 스캔 결과와 함께 생성
			    sarif_upload: true
		
			- name: Upload SARIF file
			  uses: github/codeql-action/upload-sarif@v2
			  with:
				  sarif_file: terrascan.sarif
			    token: ${{ secrets.GITHUB_TOKEN }}
		
	# 코드 배포
	TF_Code_Plan&Apply:
		needs: TF_Code_Scan
		name: Code Scan
    permissions:
      contents: read 
      pull-requests: write
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

		- name: Setup Terraform
		- uses: hashicorp/setup-terraform@v2

    - name: Terraform fmt
		  id: fmt
		  run: terraform fmt -check
		  continue-on-error: true

		- name: Terraform Init
		  id: init
		  run: terraform init
		
		- name: Terraform Validate
		  id: validate
		  run: terraform validate -no-color
		
		- name: Terraform Plan
		  id: plan
		  run: terraform plan -no-color
		
		- uses: actions/github-script@v6
		  if: github.event_name == 'pull_request'
		  env:
		    PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
		  with:
		    github-token: ${{ secrets.GITHUB_TOKEN }}
		    script: |
		      const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
		      #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
		      #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
		      <details><summary>Validation Output</summary>
		
		      \`\`\`\n
		      ${{ steps.validate.outputs.stdout }}
		      \`\`\`
		
		      </details>
		
		      #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
		
		      <details><summary>Show Plan</summary>
		
		      \`\`\`\n
		      ${process.env.PLAN}
		      \`\`\`
		
		      </details>
		
		      *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
		
		      github.rest.issues.createComment({
		        issue_number: context.issue.number,
		        owner: context.repo.owner,
		        repo: context.repo.repo,
		        body: output
		      })

		- name: Terraform apply
		  id: apply
			if: github.ref == 'refs/heads/main' && github.event_name == 'push'
			run: terraform apply -auto-approve
			env:
				AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
				AWS_SECRET_KEY_ID: ${{ secrets.AWS_SECRET_KEY_ID }}
